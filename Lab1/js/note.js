/**
 * COMP4537 - Lab 1
 * Name: Victor Liu #A00971668 - Set C
 * Date: 2024-09-15
 * 
 * note.js
 * 
 * A note object.
 * 
 * note: code generated by ChatGPT has been commented where used.
 */


class Note {
    constructor(id, top = 50, left = 50) {
        this.id = id;
        this.isSaved = false;
        this.top = 0; // Default value not used, as we are using Flexbox
        this.left = 0; // Default value not used, as we are using Flexbox
        this.text = "";
        this.noteElement = this.createNoteElement();
        // this.setPosition(this.noteElement);  // ChatGPT: set the position of the note
        // this.updateTextFromElement();
    }

    createNoteElement() {
        const noteDiv = document.createElement('div');
        noteDiv.classList.add('note-base');
        noteDiv.setAttribute('id', this.id);
        
        const deleteButton = document.createElement('button');
        deleteButton.textContent = 'X';
        deleteButton.classList.add('delete-button');
        deleteButton.addEventListener('click', () => this.deleteNote());
        noteDiv.appendChild(deleteButton);
        
        const textarea = document.createElement('textarea');
        textarea.addEventListener('input', (e) => this.updateText(e));
        noteDiv.appendChild(textarea);
        
        return noteDiv;
    }
    deleteNote() {
        if (confirm('Are you sure you want to delete this note?')) {
            // Remove note from the DOM
            this.noteElement.remove();

            // Optionally, remove note from the noteManager and save changes
            // Assuming a method to find and remove note by ID
            noteManager.removeNoteById(this.id);
            noteManager.saveNotes();
        }
    }

    updateText(event) {
        this.text = event.target.value;
        console.log(`Note ${this.id} content: `, this.text);
    }

    updateTextFromElement() {
        // Set text from element if it exists
        const textarea = this.noteElement.querySelector('textarea');
        if (textarea) {
            textarea.value = this.text;
        }
    }

    // ChatGPT: helper function to set position values
    setPosition(element) {
        element.style.top = `${this.top}px`;
        element.style.left = `${this.left}px`;
    }

    getNoteElement() {
        return this.noteElement;
    }

    noteToJSON() {
        return {
            id: this.id,
            top: this.top,
            left: this.left,
            text: this.text || ""
        };
    }

    // ChatGPT: Static method to position notes relative to each other
    static getNextPosition(lastNote) {
        const spacing = 50; // Distance between notes
        return {
            top: lastNote.top,
            left: lastNote.left + lastNote.noteElement.offsetWidth + spacing
        };
    }
}