/**
 * COMP4537 - Lab 1
 * Name: Victor Liu #A00971668 - Set C
 * Date: 2024-09-15
 * 
 * note.js
 * 
 * The NoteManager class handles the notes.
 * 
 * note: code generated by ChatGPT has been commented where used.
 */


class NoteManager {
    constructor() {
        this.notesArray = [];
        this.nextId = this.loadNextId();  // ChatGPT: 
        this.loadNotes(); 
        this.lastNote = null;
    }

    // ChatGPT:  get the next available ID from storage
    loadNextId() {
        return parseInt(localStorage.getItem('nextId')) || 1;
    }

    // // ChatGPT: Save the next ID to local storage
    saveNextId() {
        localStorage.setItem('nextId', this.nextId);
    }

    
    createNote(top = 50, left = 50) {
        const note = new Note(this.nextId++, top, left);
        this.notesArray.push(note);
        this.saveNotes(); 
        this.saveNextId(); // ChatGPT:Save the updated next ID
        this.renderNotes(); // ChatGPT: Re-render all notes to adjust positions
        return note;
    }

    
    getNotes() {
        return this.notesArray.map((note) => note.noteToJSON()); 
    }

    getNotesFromStorage() {
        const notesFromStorage = JSON.parse(localStorage.getItem("notes")) || [];
        this.notesArray = notesFromStorage;
        const event = new Event("notesRetrieved");
        document.dispatchEvent(event);
    }

 
    saveNotes() {
        const notesToSave = this.getNotes();
        localStorage.setItem("notes", JSON.stringify(notesToSave));
        const event = new Event("notesSaved");
        document.dispatchEvent(event);
    }
  
    loadNotes() {
        const notesFromStorage = JSON.parse(localStorage.getItem("notes")) || [];
        notesFromStorage.forEach(noteData => {
            const note = new Note(noteData.id, noteData.top, noteData.left);
            note.text = noteData.text; 
            this.notesArray.push(note);
            document.getElementById("notes-container").appendChild(note.getNoteElement());
            note.updateTextFromElement(); 
        });
        this.lastNote = this.notesArray[this.notesArray.length - 1] || null;
    }

    // Render notes to the container
    renderNotes() {
        const notesContainer = document.getElementById("notes-container");
        notesContainer.innerHTML = ''; // Clear current notes
        this.notesArray.forEach(note => {
            notesContainer.appendChild(note.getNoteElement());
        });
    }

    getLastNote() {
        return this.lastNote;
    }

    updateLastNote(note) {
        this.lastNote = note;
    }

    removeNoteById(id) {
        this.notesArray = this.notesArray.filter(note => note.id !== id);
        this.saveNotes();
        this.renderNotes(); // Re-render all notes after removal
    }
}